<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>azu</Title>
      <Shortcut>azu</Shortcut>
      <Description>ES: Azure Contained Database User - If your application will use only one database a contained user should be created.</Description>
      <Author />
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations />
      <Code Language="sql"><![CDATA[/**********************************************************************************************************************
** Contained Database User
** If your application will use only one database a contained user should be created.
**********************************************************************************************************************/

-- Change SSMS to connect with your database. "Ctrl+U" then type "[DATABASE_NAME]" and Enter Key.
DECLARE @UserName NVARCHAR(100) = N'<LoginName, , App_AppName>' -- Use the naming convention of App_[APPLICATION_NAME]
DECLARE @Password NVARCHAR(100) = N'<Password, , ChangeMe123!>' -- Generated from LastPass
DECLARE @IsDBReader BIT = 1 -- 0 = Can NOT select table data, 1 Can select table data (Set to 0 when app user will only insert/update/execute)
DECLARE @IsDBWriter BIT = 1 -- 0 = Can NOT insert/update table data, 1 = Can insert/update table data. (Set to 0 if app user is for reporting)
DECLARE @IsDBExecutor BIT = 1 -- 0 = Can NOT execute stored procedures, 1 = Can execute stored procedures. (Set to 0 if app user will not call stored procedures)
DECLARE @IsTableCreator BIT = 0 -- If your app user needs to CREATE/ALTER/DROP tables
DECLARE @IsDBOwner BIT = 0 -- Almost never should the app user be the owner of the database! If you do enable this, talk to the SQL team to make sure this gets added to the security baseline or it will fail the audit.

PRINT 'Creating the user...';
EXECUTE (N'CREATE USER ' + @UserName + ' WITH PASSWORD = ''' + @Password + ''';');

PRINT 'Checking and creating db_executor role...';
IF DATABASE_PRINCIPAL_ID('db_executor') IS NULL BEGIN
	CREATE ROLE db_executor;
END
GRANT EXECUTE TO db_executor;

PRINT 'Checking and creating db_tablecreator role...';
IF DATABASE_PRINCIPAL_ID('db_tablecreator') IS NULL BEGIN
	CREATE ROLE db_tablecreator;
END
GRANT CREATE TABLE TO db_tablecreator;
GRANT ALTER ON SCHEMA :: dbo TO db_tablecreator;

PRINT 'Assigning the read, write & executor roles for tables and grant execute for stored procedures...';
IF @IsDBOwner = 1 BEGIN
	PRINT 'Setting db_owner role...';
	EXECUTE (N'ALTER ROLE db_owner ADD MEMBER ' + @UserName + ';');
END
ELSE
    BEGIN
		PRINT 'Setting standard safe roles...';
		IF @IsDBReader = 1 EXECUTE (N'ALTER ROLE db_datareader ADD MEMBER ' + @UserName + ';');
		IF @IsDBWriter = 1 EXECUTE (N'ALTER ROLE db_datawriter ADD MEMBER ' + @UserName + ';');
		IF @IsDBExecutor = 1 EXECUTE (N'ALTER ROLE db_executor ADD MEMBER ' + @UserName + ';');
		IF @IsTableCreator = 1 EXECUTE (N'ALTER ROLE db_tablecreator ADD MEMBER ' + @UserName + ';');
    END

PRINT 'Denying execute on stored procedures...'
-- If there are certain stored procedures that shouldn't be accessible to the application, you can explicitly deny the app user.
--DENY EXECUTE ON dbo.StoredProcedureName TO db_executor;

GO]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>