<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>csf</Title>
      <Shortcut>csf</Shortcut>
      <Description>ES: Create scalar function</Description>
      <Author />
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations />
      <Code Language="sql"><![CDATA[/**********************************************************************************************************************
** Author:      $USER$
** Created On:  $DATE$
** Modified On: $DATE$
** Description: <FunctionDescription,, Description>
**********************************************************************************************************************/
CREATE OR ALTER FUNCTION <Schema Name, SYSNAME, dbo>.<Function Name, SYSNAME, FunctionName>(
	-- @ParameterName AS DataType [ = DefaultValue ]
) RETURNS <ReturnType,,int>
-- WITH ENCRYPTION, SCHEMABINDING, RETURNS NULL ON NULL INPUT, CALLED ON NULL INPUT, EXECUTE AS CALLER|SELF|OWNER 'user_name', INLINE = {ON|OFF}
AS
BEGIN
	-- Determine if an UDF is the best option. SQL Server 2019+ might possibly inline this function.
	-- User-defined scalar functions suck – even when they don’t access data.
	-- https://www.brentozar.com/archive/2019/05/user-defined-scalar-functions-suck-even-when-they-dont-access-data/

  	-- Declare the return variable
	DECLARE <@ResultVariable, sysname, @VariableName> <ReturnType,,int>

	-- Add the T-SQL statements to compute the return value
	$SELECTIONSTART$SELECT <@ResultVariable, sysname, @VariableName> = @ParameterName$SELECTIONEND$

	-- Return the result of the function
	RETURN <@ResultVariable, sysname, @VariableName>
END
GO]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>